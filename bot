import requests, json
def send_message(chat_id, text):
    url = "https://api.telegram.org/bot634255068:AAHcvSajWyzYFbaa99ca5e7SQQ8qSelzlJE/sendMessage"
    data = {
        "chat_id": chat_id,
        "text": text
    }
    r = requests.post(url, data = data)
    print(r.json())


def reply_keyboard(chat_id):
    reply_keyboard_markup = {"keyboard":[["1", "2"]],"resize_keyboard":True}
    data = {
        'chat_id': chat_id,
        'text': "Сделайте выбор", 
        'reply_markup': json.dumps(reply_keyboard_markup)
    }
    url = "https://api.telegram.org/bot634255068:AAHcvSajWyzYFbaa99ca5e7SQQ8qSelzlJE/sendMessage"
    r = requests.get(url, data = data)
    print(r.json())
    
userids = str("")
userdict = {}
usermas =[]

func = True
def func(text):
    global func
    if (text[0] == '/'):
        if (text == '/help'):
            print_help()
        else:
            if (text == '/back'):
                back()
            else:
                if (text == '/restart'):
                    restart()
                else:
                    if (text != '/start'):
                        send_message(int(s[0]), 'Я не знаю такой команды')
                        #print('Я не знаю такой команды')
        func = False

def print_help():
    global count
    send_message(int(s[0]), 'Первым делом выберете квест вводом числа от 1 до ' + count + '.\nЕсли вы уже выбрали квест и начали игру, выбирайте вариант ответа нажатием на кнопки с соответствующими номерами')
    #print('Первым делом выберете квест вводом числа от 1 до ' + count + '.\nЕсли вы уже выбрали квест и начали игру, выбирайте вариант ответа нажатием на кнопки с соответствующими номерами')

def back():
    if (s[2] != 'none' and len(s[2])>1):  
        make_scenario(s[1])
        send_message(int(s[0]), 'Возвращение на предыдущий уровень')
        print('Возвращение на предыдущий уровень')        
        send_message(int(s[0]), scenario[s[2]][0])
        send_message(int(s[0]), scenario[s[2]][1])
        send_message(int(s[0]), scenario[s[2]][2])
        reply_keyboard(int(s[0]))
        #print(scenario[s[2][0:len(s[2])-1]][0])
        #print(scenario[s[2][0:len(s[2])-1]][1])
        #print(scenario[s[2][0:len(s[2])-1]][2])
        s[2] = s[2][0:len(s[2])-1]
        update_user()
    else:
        send_message(int(s[0]), 'Возвращение сейчас невозможно')
        #print('Возвращение сейчас невозможно')

def restart():
    global count
    s[1] = 'create'
    s[2] = 'none'
    send_message(int(s[0]), 'Выберите квест вводом числа от 1 до ' + count)
    #print('Выберите квест вводом числа от 1 до ' + count)
    update_user()

def make_userdict():
    global userids, userdict, usermas
    use = open('user.txt')
    usermas = use.readlines();
    i = int(0)
    while (i < len(usermas)):
        us = usermas[i].strip()
        s = us.split(' ')
        usermas[i] = usermas[i].split(' ')
        usermas[i][0] = usermas[i][0].strip()
        usermas[i][1] = usermas[i][1].strip()
        usermas[i][2] = usermas[i][2].strip()
        i += 1
        userids = userids + ' ' + s[0]
        userids.strip()
        userdict[s[0]] = s
        
    use.close()
        
s = []

def make_s():
    global userids, userdict, s, usermas
    if (userids.find(str(event["message"]["from"]["id"])) == -1):
        use = open('user.txt' , 'a')
        s = [str(event["message"]["from"]["id"]), 'none' , 'none']
        usermas.append(s)
        userdict[s[0]] = s
        us = s[0] + ' ' + s[1] + ' ' + s[2]
        use.write(us + '\n')
        use.close()
    else:
        s = userdict[str(event["message"]["from"]["id"])]

count = ''
def make_count():
    global count
    c = open('texts\count.txt')
    count = str(c.readline())

scenario = {}
def make_scenario(name_file):
    global scenario
    f = open('texts\\' + name_file + 'text.txt')
    text = f.readlines()
    i = int(0)
    while (i < len(text)) :
        num = text[i].strip()
        num = '\n'.join(num.split('\\n'))
        i += 1
        ask = text[i].strip()
        ask = '\n'.join(ask.split('\\n'))
        i += 1
        first = text[i].strip()
        first = '\n'.join(first.split('\\n'))
        i += 1
        second = text[i].strip()
        second = '\n'.join(second.split('\\n'))
        i += 1
        num = '\n'.join(num.split('\\n'))
        scenario[num] = [str(ask), str(first), str(second)]
    f.close()

namefile = ''
def make_namefile(newinput):
    global namefile, s, count
    intpr = bool(True)
    ints = str('0123456789')
    for i in range(0,len(newinput)):
        if (ints.find(newinput[i]) == -1):
            intpr = False
            break
    if (len(newinput) == 0):
        intpr = False
    if (intpr):
        if (int(newinput) >= 1 and int(newinput) <= int(count)):
            send_message(int(s[0]), 'Выбор сделан')
            #print('Выбор сделан')
            s[1] = newinput
            namefile = newinput
        else:
            send_message(int(s[0]), 'Ввод неверен\nВыберите квест вводом числа от 1 до ' + count)
            #print('Ввод неверен\nВыберите квест вводом числа от 1 до ' + count)
            reply_keyboard(int(s[0]))
            s[1] = 'create'
    else:
        send_message(int(s[0]), 'Ввод неверен\nВыберите квест вводом числа от 1 до ' + count)
        #print('Ввод неверен\nВыберите квест вводом числа от 1 до ' + count)
        reply_keyboard(int(s[0]))
        s[1] = 'create'
        
def update_user():
    global s,usermas
    user = open('user.txt' , 'w')
    for i in range(0,len(usermas)):
        if (s[0] == usermas[i][0]):
            us = s[0] + ' ' + s[1] + ' ' + s[2]
            user.write(us + '\n')
        else:
            us = usermas[i][0] + ' ' + usermas[i][1] + ' ' + usermas[i][2]
            user.write(us + '\n')
    user.close()
check = True
def check(text):
    global s, check
    if (text == '1'):
        s[2] = s[2] + '0'
    else:
        if (text == '2'):
            s[2] = s[2] + '1'
        else:
            send_message(int(s[0]), 'Ввод неверен\nВыберете вариант ответа введя 1 для первого, и 2 для второго')
            #print('Ввод неверен\nВыберете вариант ответа введя 1 для первого, и 2 для второго')
            reply_keyboard(int(s[0]))
            check = False
            

def point(event,context):
    global userids, userdict, s, count, namefile, scenario, func, check
    make_userdict()
    make_s()
    make_count()
    update_user()
    func(event["message"]["text"])
    if (func):
        if (s[1] == 'none'):
            send_message(int(s[0]), 'Выберите квест вводом числа от 1 до ' + count)
            #print('Выберите квест вводом числа от 1 до ' + count)
            reply_keyboard(int(s[0]))
            s[1] = 'create'
            update_user()
        else:
            if (s[1] == 'create'):
                make_namefile(event["message"]["text"])
                if (s[1] != 'create'):
                    s[2] = '0'
                    make_scenario(namefile)
                    send_message(int(s[0]), scenario[s[2]][0])
                    send_message(int(s[0]), scenario[s[2]][1])
                    send_message(int(s[0]), scenario[s[2]][2])
                    reply_keyboard(int(s[0]))
                    #print(scenario[s[2]][0])
                    #print(scenario[s[2]][1])
                    #print(scenario[s[2]][2])
                update_user()
            else:
                check(event["message"]["text"])
                if (check):
                    make_scenario(str(s[1]))
                    if (scenario[s[2]][0].find('конец игры') == -1):
                        send_message(int(s[0]), scenario[s[2]][0])
                        send_message(int(s[0]), scenario[s[2]][1])
                        send_message(int(s[0]), scenario[s[2]][2])
                        reply_keyboard(int(s[0]))
                        #print(scenario[s[2]][0])
                        #print(scenario[s[2]][1])
                        #print(scenario[s[2]][2])
                        update_user()
                    else:
                        send_message(int(s[0]), scenario[s[2]][0])
                        #print(scenario[s[2]][0])
                        restart()
